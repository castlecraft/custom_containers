x-custom-image: &custom_image
  image: ${IMAGE_NAME:-docker.io/frappe/erpnext}:${VERSION?No version set}

version: "3.9"

services:
  backend:
    <<: *custom_image
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3072M
      restart_policy:
        condition: on-failure
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - mariadb-network
      - bench-network
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - "0.0.0.0:8000"
      interval: 2s
      timeout: 10s
      retries: 30

  frontend:
    <<: *custom_image
    command:
      - nginx-entrypoint.sh
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.middlewares.prod-redirect.redirectscheme.scheme=https
        # Change router name prefix from erpnext to the name of stack in case of multi bench setup
        - traefik.http.routers.${BENCH_NAME:-erpnext}-http.rule=Host(${SITES:?No sites set})
        - traefik.http.routers.${BENCH_NAME:-erpnext}-http.entrypoints=http
        # Remove following lines in case of local setup
        - traefik.http.routers.${BENCH_NAME:-erpnext}-http.middlewares=prod-redirect
        - traefik.http.routers.${BENCH_NAME:-erpnext}-https.rule=Host(${SITES})
        - traefik.http.routers.${BENCH_NAME:-erpnext}-https.entrypoints=https
        - traefik.http.routers.${BENCH_NAME:-erpnext}-https.tls=true
        - traefik.http.routers.${BENCH_NAME:-erpnext}-https.tls.certresolver=le
        # Remove above lines in case of local setup
        # Uncomment and change domain for non-www to www redirect
        # - traefik.http.routers.${BENCH_NAME:-erpnext}-https.middlewares=nonwwwtowww
        # - traefik.http.middlewares.nonwwwtowww.redirectregex.regex=^https?://(?:www\.)?(.*)
        # - traefik.http.middlewares.nonwwwtowww.redirectregex.replacement=https://www.$$1
        - traefik.http.services.${BENCH_NAME:-erpnext}.loadbalancer.server.port=8080
    environment:
      BACKEND: backend:8000
      FRAPPE_SITE_NAME_HEADER: $$host
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - bench-network
      - traefik-public
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - "0.0.0.0:8080"
      interval: 2s
      timeout: 30s
      retries: 30

  queue-default:
    <<: *custom_image
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 2048M
      replicas: 5
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - default
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - mariadb-network
      - bench-network
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - "redis-queue:6379"
      interval: 2s
      timeout: 10s
      retries: 30

  queue-long:
    <<: *custom_image
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 3072M
      replicas: 5
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - long
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - mariadb-network
      - bench-network
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - "redis-queue:6379"
      interval: 2s
      timeout: 10s
      retries: 30

  queue-short:
    <<: *custom_image
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - worker
      - --queue
      - short
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - mariadb-network
      - bench-network
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - "redis-queue:6379"
      interval: 2s
      timeout: 10s
      retries: 30

  scheduler:
    <<: *custom_image
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - schedule
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - mariadb-network
      - bench-network
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - "redis-queue:6379"
      interval: 2s
      timeout: 10s
      retries: 30

  websocket:
    <<: *custom_image
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - mariadb-network
      - bench-network
    healthcheck:
      test:
        - CMD
        - wait-for-it
        - "0.0.0.0:9000"
      interval: 2s
      timeout: 10s
      retries: 30

  migration:
    <<: *custom_image
    deploy:
      mode: replicated
      replicas: ${MIGRATE:-1}
      restart_policy:
        condition: none
    entrypoint: ["bash", "-c"]
    command:
      - |
        bench --site all set-config -p maintenance_mode 1
        bench --site all set-config -p pause_scheduler 1
        bench --site all migrate
        bench --site all set-config -p maintenance_mode 0
        bench --site all set-config -p pause_scheduler 0
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    networks:
      - mariadb-network
      - bench-network

  backup-sites:
    <<: *custom_image
    deploy:
      mode: replicated
      replicas: 0
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=0 */6 * * *"
        - "swarm.cronjob.skip-running=false"
      restart_policy:
        condition: none
    entrypoint: ["bash", "-c"]
    command:
      - |
        bench --site all backup
        ## Uncomment for restic snapshots.
        # restic snapshots || restic init
        # restic backup sites
        ## Uncomment to keep only last 30 snapshots.
        # restic forget --group-by=paths --keep-last=30 --prune
    environment:
      - RESTIC_REPOSITORY=${RESTIC_REPOSITORY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - RESTIC_PASSWORD=${RESTIC_PASSWORD}
    volumes:
      - "sites:/home/frappe/frappe-bench/sites"
    networks:
      - bench-network
      - mariadb-network

  configurator:
    <<: *custom_image
    deploy:
      mode: replicated
      replicas: ${CONFIGURE:-0}
      restart_policy:
        condition: none
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    entrypoint: ["bash", "-c"]
    command:
      - >
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_SOCKETIO";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
    environment:
      DB_HOST: ${DB_HOST:-mariadb_db}
      DB_PORT: ${DB_PORT:-3306}
      REDIS_CACHE: redis-cache:6379
      REDIS_QUEUE: redis-queue:6379
      REDIS_SOCKETIO: redis-socketio:6379
      SOCKETIO_PORT: 9000

  create-site:
    <<: *custom_image
    deploy:
      mode: replicated
      replicas: ${CREATE_SITE:-0}
      restart_policy:
        condition: none
    entrypoint: ["bash", "-c"]
    command:
      - >
        wait-for-it -t 120 $$DB_HOST:$$DB_PORT;
        wait-for-it -t 120 redis-cache:6379;
        wait-for-it -t 120 redis-queue:6379;
        export start=`date +%s`;
        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find sites/common_site_config.json with required keys";
            exit 1
          fi
        done;
        echo "sites/common_site_config.json found";
        [[ -d "sites/${SITE_NAME}" ]] && echo "${SITE_NAME} already exists" && exit 0;
        bench new-site --mariadb-user-host-login-scope='%' --admin-password=$${ADMIN_PASSWORD} --db-root-username=root --db-root-password=$${DB_ROOT_PASSWORD} $${INSTALL_APP_ARGS} $${SITE_NAME};
    volumes:
      - sites:/home/frappe/frappe-bench/sites
    environment:
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      INSTALL_APP_ARGS: ${INSTALL_APP_ARGS}
      SITE_NAME: ${SITE_NAME}
    networks:
      - bench-network
      - mariadb-network

  redis-cache:
    image: redis:7-alpine
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - bench-network
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 5s
      timeout: 5s
      retries: 3

  redis-queue:
    image: redis:7-alpine
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-queue-data:/data
    networks:
      - bench-network
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 5s
      timeout: 5s
      retries: 3

  redis-socketio:
    image: redis:7-alpine
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-socketio-data:/data
    networks:
      - bench-network
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 5s
      timeout: 5s
      retries: 3

volumes:
  redis-queue-data:
  redis-socketio-data:
  sites:
    # # change ip from 1.2.3.4 to your NFS server ip
    # driver_opts:
    #   # AWS EFS
    #   # o: "addr=fs-55Nuv9e5kB2W2ajdL.efs.us-east-1.amazonaws.com,nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport"
    #   o: "addr=1.2.3.4,nfsvers=4,rw,nolock,soft"
    #   type: "nfs"
    #   device: ":/var/nfs/general/bench01"

networks:
  bench-network:
    name: ${BENCH_NAME:-erpnext}
    external: false
  mariadb-network:
    name: mariadb-network
    external: true
  traefik-public:
    name: traefik-public
    external: true

# ------------------------+--------------------------------------+---------
# Env Variables           | Description                          | Default
# ------------------------+--------------------------------------+---------
# AWS_ACCESS_KEY_ID       | AWS Access Key for restic            | nil
# AWS_SECRET_ACCESS_KEY   | AWS Secret Key for restic            | nil
# BENCH_NAME              | Name of the bench newtork            | erpnext
# IMAGE_NAME              | Container image to use               | docker.io/frappe/erpnext
# MIGRATE                 | Enable migration on deploy           | 1
# CONFIGURE               | Re-generate common_site_config.json  | 0
# CREATE_SITE             | Enable site creation on deploy       | 0
# RESTIC_PASSWORD         | Restic Password. DO NOT Forget!      | nil
# RESTIC_REPOSITORY       | Path Styled S3 endpoint              | nil
# SITES                   | Mandatory List of sites as back      | nil
#                         | quoted strings, e.g. `a.com`,`b.org` |
# VERSION                 | Mandatory image tag to use           | nil
